using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Overload1
{
    public class Mat
    {
        static int n, m;
        public static int[,] readMat()
        {
            Console.WriteLine("Enter the order of the matrix ");
            n = int.Parse(Console.ReadLine());
            m = int.Parse(Console.ReadLine());
            int[,] mat = new int[n, m];
            Console.WriteLine("Enter " + n * m + " elements..");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    mat[i, j] = int.Parse(Console.ReadLine());
                }

            }
            return mat;
        }
        public static void dispMat(int[,] ar)
        {

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    Console.Write(ar[i, j] + "  ");
                }
                Console.WriteLine();
            }
        }
        public static int[,] sum(int[,] a, int[,] b)
        {

            int[,] sum = new int[n, m];

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    sum[i, j] = a[i, j] + b[i, j];
                }

            }
            return sum;
        }
        public static int[,] sub(int[,] a, int[,] b)
        {

            int[,] sub = new int[n, m];

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    sub[i, j] = a[i, j] - b[i, j];
                }

            }
            return sub;
        }
        public static int[,] mul(int[,] a, int[,] b)
        {

            int[,] mul = new int[n, m];            

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    mul[i, j] = 0;
                    for (int k = 0; k < n; k++)
                    {
                        mul[i, j] += (a[i, k] * b[k, j]);                         
                    }                    
                }

            }
            return mul;
        }
    }

    class Matrix
    {
        public Matrix() { }
        private int[,] value;
        public Matrix(int[,] matrix)
        {
            value = matrix;
        }
        public int[,] MatrixToInt()
        {
            return this.value;
        }

        public static Matrix operator +(Matrix a, Matrix b)
        {
            return new Matrix(Mat.sum(a.MatrixToInt(), b.MatrixToInt()));
        }
        public static Matrix operator -(Matrix a, Matrix b)
        {
            return new Matrix(Mat.sub(a.MatrixToInt(), b.MatrixToInt()));
        }
        public static Matrix operator *(Matrix a, Matrix b)
        {
            return new Matrix(Mat.mul(a.MatrixToInt(), b.MatrixToInt()));
        }

        public static void Main(string[] args)
        {
            int[,] a = Mat.readMat();
            int[,] b = Mat.readMat();
            Matrix m1 = new Matrix(a);
            Matrix m2 = new Matrix(b);
            Matrix m3 = m1 + m2;
            Mat.dispMat(m3.MatrixToInt());
            Console.WriteLine();
            Matrix m4 = m1 - m2;
            Mat.dispMat(m4.MatrixToInt());
            Console.WriteLine();
            Matrix m5 = m1 * m2;
            Mat.dispMat(m5.MatrixToInt());
            Console.ReadKey();
        }
    }
}
